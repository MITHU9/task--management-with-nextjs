generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String  @id
  email   String  @unique
  name    String
  about   String?
  industryType String
  role   String
  country String
  workspaces WorkspaceMember[]
  image  String?
  tasks  Task[] 
  activities Activity[]
  comments Comment[]
  subscription Subscription?

  onboardingCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  description String?
  ownerId   String
  members   WorkspaceMember[]
  projects  Project[]
  inviteCode String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}


enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

model WorkspaceMember {
  id          String   @id @default(uuid())
  userId      String
  workspaceId String
  accessLevel AccessLevel @default(MEMBER)
  projectAccess ProjectAccessLevel[]

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  workspaceId String
  tasks       Task[]
  activities  Activity[]
  comments    Comment[]
  projectAccess ProjectAccessLevel[] 
  documentations Documentation[]   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([ workspaceId])
}

model ProjectAccessLevel {
  id         String   @id @default(uuid())
  workspaceMemberId String

  workspaceMember WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  hasAccess Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([workspaceMemberId, projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
  BLOCKED
}
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}



model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate   DateTime
  dueDate     DateTime

  position    Int @default(0)
  
  projectId   String

  assigneeId  String?
  assigneeTo    User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull) 

  attachments File[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)



}

model Activity {
  id        String   @id @default(uuid())
  type     String
  description String
  userId    String 
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId]) // for querying activities by user
  @@index([projectId]) // for querying activities by project
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId]) 
  @@index([projectId])
} 

model Documentation {
  id        String   @id @default(uuid())
  content   String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updatedBy String?

  project   Project @relation(fields: [projectId], references: [id])

}

enum FileType {
  IMAGE
  PDF
}

model File {
  id        String   @id @default(uuid())
  url       String
  name      String
  taskId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type FileType

  task      Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
} 

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  EXPIRED
}

model Subscription {
  id            String   @id @default(uuid())
  userId        String   @unique
  plan          SubscriptionPlan @default(FREE)
  status        SubscriptionStatus @default(ACTIVE)
  lemonsqueezyId String?
  orderId       String?
  customerId    String?
  currentPeriodEnd DateTime?
  frequency    String @default("monthly")
  cancelAtPeriodEnd Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId])
}
